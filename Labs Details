var endDate = DateTime.UtcNow.Date;
var startDate = endDate.AddDays(-30);

// 1. Load stations with tanks and last measurements
var stationsWithTanks = await _db.Stations
    .Where(s =>
        s.DeletedAt == null &&
        s.StationType != null &&
        s.StationType.Trim().ToLower() == enStationType.Main.ToString().Trim().ToLower())
    .Select(s => new
    {
        Station = s,
        Tanks = s.Tanks
            .Where(t => t.TankStatusId == (int)enTankStatuses.online)
            .Select(t => new
            {
                Tank = t,
                LastMeasurement = t.TankMeasurements
                    .OrderByDescending(m => m.Id)
                    .FirstOrDefault()
            })
    })
    .ToListAsync();

// 2. Process per station
var stationResults = new List<StationDistributionInfo>();

foreach (var stationEntry in stationsWithTanks)
{
    double totalVolume = 0;
    double totalCapacity = 0;

    foreach (var tankEntry in stationEntry.Tanks)
    {
        if (tankEntry.LastMeasurement != null)
            totalVolume += tankEntry.LastMeasurement.FuelVolume;

        totalCapacity += tankEntry.Tank.Capacity;
    }

    // Get distribution volume safely
    double totalDistributionVolume = await GetStationDistributionVolumeAsync(startDate, endDate, stationEntry.Station.StationGuid);

    stationResults.Add(new StationDistributionInfo
    {
        City = stationEntry.Station.City,
        StationGuid = stationEntry.Station.StationGuid,
        TotalVolume = totalVolume,
        Capacity = totalCapacity,
        DistributionVolume = totalDistributionVolume
    });
}

// 3. Aggregate by city and compute final metrics
var cityResults = stationResults
    .GroupBy(r => r.City)
    .Select(g =>
    {
        double totalVolume = g.Sum(s => s.TotalVolume);
        double totalCapacity = g.Sum(s => s.Capacity);
        double totalDistributionVolume = g.Sum(s => s.DistributionVolume);

        double averageDailyDistribution = totalDistributionVolume / 30.0;
        double expectedDays = averageDailyDistribution > 0
            ? totalVolume / averageDailyDistribution
            : 0;

        return new CitySupplyMetrics
        {
            City = g.Key,
            CurrentVolumeLiters = totalVolume,
            CapacityLiters = totalCapacity,
            TotalDistributionLast30Days = totalDistributionVolume,
            AverageDailyDistribution = averageDailyDistribution,
            ExpectedDaysOfSupply = expectedDays
        };
    })
    .OrderBy(c => c.City)
    .ToList();



=======================

public class CitySupplyMetrics
{
    public string City { get; set; }
    public double CurrentVolumeLiters { get; set; }
    public double CapacityLiters { get; set; }
    public double TotalDistributionLast30Days { get; set; }
    public double AverageDailyDistribution { get; set; }
    public double ExpectedDaysOfSupply { get; set; }
}
