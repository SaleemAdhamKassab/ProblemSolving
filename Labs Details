var endDate = DateTime.UtcNow.Date;
var startDate = endDate.AddDays(-30);

// STEP 1: Load all main stations with online tanks and their last measurements
var stationsWithTanks = await _db.Stations
    .Where(s =>
        s.DeletedAt == null &&
        s.StationType != null &&
        s.StationType.Trim().ToLower() == enStationType.Main.ToString().Trim().ToLower())
    .Select(s => new
    {
        Station = s,
        Tanks = s.Tanks
            .Where(t => t.TankStatusId == (int)enTankStatuses.online)
            .Select(t => new
            {
                Tank = t,
                LastMeasurement = t.TankMeasurements
                    .OrderByDescending(m => m.Id)
                    .FirstOrDefault()
            })
    })
    .ToListAsync();

// STEP 2: Validate and prepare per station
var stationResults = new List<StationDistributionInfo>();

foreach (var stationEntry in stationsWithTanks)
{
    double totalVolume = 0;
    double totalCapacity = 0;

    foreach (var tankEntry in stationEntry.Tanks)
    {
        if (tankEntry.LastMeasurement != null)
        {
            totalVolume += tankEntry.LastMeasurement.FuelVolume;
        }
        totalCapacity += tankEntry.Tank.Capacity;
    }

    // Safely get the distribution volume for this station in the period
    double totalDistributionVolume = await GetStationDistributionVolumeAsync(startDate, endDate, stationEntry.Station.StationGuid);

    stationResults.Add(new StationDistributionInfo
    {
        City = stationEntry.Station.City,
        StationGuid = stationEntry.Station.StationGuid,
        TotalVolume = totalVolume,
        Capacity = totalCapacity,
        DistributionVolume = totalDistributionVolume
    });
}

// STEP 3: Group by city
var cityResults = stationResults
    .GroupBy(r => r.City)
    .Select(g => new CityTotalDistribution
    {
        City = g.Key,
        TotalVolume = g.Sum(s => s.TotalVolume),
        Capacity = g.Sum(s => s.Capacity),
        TotalDistributionVolume = g.Sum(s => s.DistributionVolume)
    })
    .OrderBy(c => c.City)
    .ToList();












////////////////////////////
public class StationDistributionInfo
{
    public string City { get; set; }
    public string StationGuid { get; set; }
    public double TotalVolume { get; set; }
    public double Capacity { get; set; }
    public double DistributionVolume { get; set; }
}


public class CityTotalDistribution
{
    public string City { get; set; }
    public double TotalVolume { get; set; }
    public double Capacity { get; set; }
    public double TotalDistributionVolume { get; set; }
}
