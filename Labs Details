using FMSD_BE.Data;
using FMSD_BE.Services.DashboardService;
using FMSD_BE.Services.FilterService;
using FMSD_BE.Services.ReportService.AlarmService;
using FMSD_BE.Services.ReportService.CalibrationDetailService;
using FMSD_BE.Services.ReportService.CalibrationService;
using FMSD_BE.Services.ReportService.DistributionTransactionService;
using FMSD_BE.Services.ReportService.LeakageSrvice;
using FMSD_BE.Services.ReportService.TankService;
using FMSD_BE.Services.ReportService.TransactionDetailService;
using FMSD_BE.Services.SharedService;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using System.Text.Json.Serialization;
using FMSD_BE.Services.Auth;
using System.Security.Claims;
using Microsoft.AspNetCore.Server.IISIntegration;
using FMSD_BE.Middleware;
using Hangfire;
using FMSD_BE.Services.EmailService;
using FMSD_BE.Services.SMSService;
using FMSD_BE.Services.NotifyTeamService;
using FMSD_BE.Helper;




var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddAutoMapper(typeof(Program));
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Sql server Db Connections
string appConfigConnectionString = builder.Configuration.GetConnectionString("AppConfigConnection")!;
builder.Services.AddDbContext<CentralizedFmsCloneContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
builder.Services.AddDbContext<ApplicationConfigDbContext>(options => options.UseSqlServer(appConfigConnectionString));

builder.Services.AddScoped<IDashboardService, DashboardService>();
builder.Services.AddScoped<IFilterService, FilterService>();
builder.Services.AddScoped<IAlarmService, AlarmService>();
builder.Services.AddScoped<ITankService, TankService>();
builder.Services.AddScoped<ISharedService, SharedService>();
builder.Services.AddScoped<IFuelTransactionService, FuelTransactionService>();
builder.Services.AddScoped<ITransactionDetailService, TransactionDetailService>();
builder.Services.AddScoped<ILeakageService, LeakageService>();
builder.Services.AddScoped<ICalibrationService, CalibrationService>();
builder.Services.AddScoped<ICalibrationDetailService, CalibrationDetailService>();

builder.Services.AddScoped<IJwtService, JwtService>();
builder.Services.AddScoped<IWindowsAuthService, WindowsAuthService>();
builder.Services.AddControllers().AddJsonOptions(x => x.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles);

builder.Services.AddTransient<IEmailService, EmailService>();
builder.Services.AddTransient<ISMSService, SMSService>();

//Add Windows Auth
builder.Services.AddSwaggerGen(setup =>
{

    // Include 'SecurityScheme' to use JWT Authentication
    var jwtSecurityScheme = new OpenApiSecurityScheme
    {
        BearerFormat = "JWT",
        Name = "JWT Authentication",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Scheme = JwtBearerDefaults.AuthenticationScheme,
        Description = "Put **_ONLY_** your JWT Bearer token on textbox below!",

        Reference = new OpenApiReference
        {
            Id = JwtBearerDefaults.AuthenticationScheme,
            Type = ReferenceType.SecurityScheme
        }
    };

    setup.AddSecurityDefinition(jwtSecurityScheme.Reference.Id, jwtSecurityScheme);

    setup.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        { jwtSecurityScheme, Array.Empty<string>() }
    });

    //setup.OperationFilter<SwaggerTenantParam>();

});

builder.Services.AddAuthentication(IISDefaults.AuthenticationScheme).AddNegotiate();
builder.Services.AddHttpContextAccessor();
builder.Services.AddTransient<ClaimsPrincipal>(s => s.GetService<IHttpContextAccessor>().HttpContext.User);

var origins = builder.Configuration.GetSection("AllowedOrigins").Get<string[]>();

builder.Services.AddCors(o => o.AddPolicy("CorsPolicy", builder =>
{
    builder.AllowAnyMethod()
            .AllowAnyHeader()
            .WithExposedHeaders("X-Content-Type-Options")
            .SetIsOriginAllowed(origin => origins.Contains("all") || origins
            .Select(x => x.ToLower()).Contains(origin.ToLower())) // allow any origin you can change here to allow localhost:4200
            .AllowCredentials();
}));

// Add Hangfire services
builder.Services.AddHangfire(config =>
config.SetDataCompatibilityLevel(CompatibilityLevel.Version_180)
.UseSimpleAssemblyNameTypeSerializer()
.UseRecommendedSerializerSettings()
.UseSqlServerStorage(builder.Configuration.GetConnectionString("AppConfigConnection"))
//.UseActivator(new HangfireActivator(builder.Services.BuildServiceProvider()))
);


// Notify team recurring job

//////////////////////////////////////// StrategicTanksTotalBalanceLessThanOrEqualTo50% //////////////////////////////////

RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "StrategicTanksTotalBalanceLessThanOrEqualTo50_8Am",
    service => service.CheckTanksTotalBalanceAsync(50,
                                                    "StrategicTanksTotalBalanceLessThanOrEqualTo50%",
                                                    false,
                                                    25),
    "0 8 * * *", // <-- 08:00 AM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);

RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "StrategicTanksTotalBalanceLessThanOrEqualTo50_2Pm",
    service => service.CheckTanksTotalBalanceAsync(50,
                                                    "StrategicTanksTotalBalanceLessThanOrEqualTo50%",
                                                    false,
                                                    25),
    "0 14 * * *", // <-- 02:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);

RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "StrategicTanksTotalBalanceLessThanOrEqualTo50_8Pm",
    service => service.CheckTanksTotalBalanceAsync(50,
                                                    "StrategicTanksTotalBalanceLessThanOrEqualTo50%",
                                                    false,
                                                    25),
    "0 20 * * *", // <-- 08:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);


//////////////////////////////////////// StrategicTanksTotalBalanceLessThanOrEqualTo25% //////////////////////////////////

RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "StrategicTanksTotalBalanceLessThanOrEqualTo25_8Am",
    service => service.CheckTanksTotalBalanceAsync(25,
                                                    "StrategicTanksTotalBalanceLessThanOrEqualTo25%",
                                                    false,
                                                    0),
    "0 8 * * *", // <-- 08:00 AM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);


RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "StrategicTanksTotalBalanceLessThanOrEqualTo25_2Pm",
    service => service.CheckTanksTotalBalanceAsync(25,
                                                    "StrategicTanksTotalBalanceLessThanOrEqualTo25%",
                                                    false,
                                                    0),
    "0 14 * * *", // <-- 02:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);

RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "StrategicTanksTotalBalanceLessThanOrEqualTo25_8Pm",
    service => service.CheckTanksTotalBalanceAsync(25,
                                                    "StrategicTanksTotalBalanceLessThanOrEqualTo25%",
                                                    false,
                                                    0),
    "0 20 * * *", // <-- 08:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);

//////////////////////////////////////// SmallStationTanksTotalBalanceLessThanOrEqualTo20% //////////////////////////////////

RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "SmallStationTanksTotalBalanceLessThanOrEqualTo20_8Am",
    service => service.CheckTanksTotalBalanceAsync(20,
                                                    "SmallStationTanksTotalBalanceLessThanOrEqualTo20%",
                                                    true,
                                                    0),
    "0 8 * * *", // <-- 08:00 AM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);


RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "SmallStationTanksTotalBalanceLessThanOrEqualTo20_2Pm",
    service => service.CheckTanksTotalBalanceAsync(20,
                                                    "SmallStationTanksTotalBalanceLessThanOrEqualTo20%",
                                                    true,
                                                    0),
    "0 14 * * *", // <-- 02:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);


RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(
    "SmallStationTanksTotalBalanceLessThanOrEqualTo20_8Pm",
    service => service.CheckTanksTotalBalanceAsync(20,
                                                    "SmallStationTanksTotalBalanceLessThanOrEqualTo20%",
                                                    true,
                                                    0),
    "0 20 * * *", // <-- 08:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);

//////////////////////////////////////// RemainingDaysPerStationsLessThanOrEqualTo1.5 //////////////////////////////////

RecurringJob.AddOrUpdate<RemainingDaysPerStation>(
    "RemainingDaysPerStationsLessThanOrEqualTo1.5_8Am",
    service => service.CheckRemainingDaysPerStationAsync("RemainingDaysPerStationsLessThanOrEqualTo1.5", 1.5),
    "0 8 * * *", // <-- 08:00 AM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);

RecurringJob.AddOrUpdate<RemainingDaysPerStation>(
    "RemainingDaysPerStationsLessThanOrEqualTo1.5_2Pm",
    service => service.CheckRemainingDaysPerStationAsync("RemainingDaysPerStationsLessThanOrEqualTo1.5", 1.5),
    "0 14 * * *", // <-- 02:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);


RecurringJob.AddOrUpdate<RemainingDaysPerStation>(
    "RemainingDaysPerStationsLessThanOrEqualTo1.5_8Pm",
    service => service.CheckRemainingDaysPerStationAsync("RemainingDaysPerStationsLessThanOrEqualTo1.5", 1.5),
    "0 20 * * *", // <-- 08:00 PM
    new RecurringJobOptions
    {
        TimeZone = TimeZoneInfo.Local
    }
);


////////////////////////////////////////// Leakage Monitor Job //////////////////////////////////

// Get records created in the last 5 minutes and not processed
DateTime recentThreshold = DateTime.UtcNow.AddMinutes(-5);


RecurringJob.AddOrUpdate<LeakageMonitorJob>(
    "LeakageMonitorJob",
    job => job.CheckNewLeakagesAndNotify("LeakageMonitorJob", recentThreshold),
    "*/5 * * * *" // every 5 minutes
);

////////////////////////////////////////// Fuel Filling Operation //////////////////////////////////

RecurringJob.AddOrUpdate<FuelFillingOperation>(
    "NewFuelFillingOperation",
    job => job.CheckNewFuelFillingOperationAsync("NewFuelFillingOperation", recentThreshold),
    "*/5 * * * *" // every 5 minutes
);

////////////////////////////////////////// Fuel Volume Discrepancy //////////////////////////////////

////DateTime yesterday = DateTime.Now.Date.AddDays(-1);


//DateTime yesterday = DateTime.Now.Date.AddDays(-1000);


//RecurringJob.AddOrUpdate<FuelVolumeDiscrepancy>(
//    "FuelVolumeDiscrepancy",
//    service => service.CheckNewFuelVolumeDiscrepancyAsync("FuelVolumeDiscrepancy",
//                                                            yesterday.AddSeconds(1),
//                                                            //yesterday.AddHours(23).AddMinutes(59).AddSeconds(59)
//                                                            DateTime.Now
//                                                            ),
//    "0 9 * * *", // <-- 09:00 AM
//    new RecurringJobOptions
//    {
//        TimeZone = TimeZoneInfo.Local
//    }
//);

builder.Services.AddHangfireServer();
























var app = builder.Build();

// Register Audit Middleware
app.UseMiddleware<RequestAuditMiddleware>();

app.Use(async (context, next) =>
{
    //add anti-clickjacking header (security issues)
    context.Response.Headers.Add("X-Frame-Options", "DENY");
    context.Response.Headers.Add("Content-Security-Policy", "frame-ancestors 'none';");
    context.Response.Headers.Add("X-Content-Type-Options", "nosniff");
    // Add CSP Middleware
    context.Response.Headers.Append("Content-Security-Policy",
        "default-src 'self'; " +
        "script-src 'self' 'unsafe-inline' https://trusted.cdn.com; " +
        "style-src 'self' 'unsafe-inline'; " +
        "img-src 'self' data: https://images.com; " +
        "font-src 'self' https://fonts.googleapis.com;");

    await next();
});

// Configure the HTTP request pipeline.
//if (app.Environment.IsDevelopment())
//{
app.UseSwagger();
app.UseSwaggerUI();
//}

app.UseCors("CorsPolicy");
app.UseHttpsRedirection();
// Use Hangfire dashboard


app.UseHangfireDashboard("/hangfire", new DashboardOptions
{
    Authorization = [new HangfireDashboardAuthorizationFilter()]
});


app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
app.Run();






System.InvalidOperationException: 'Current JobStorage instance has not been initialized yet. You must set it before using Hangfire Client or Server API. For .NET Core applications please call the `IServiceCollection.AddHangfire` extension method from Hangfire.NetCore or Hangfire.AspNetCore package depending on 



RecurringJob.AddOrUpdate<CheckTanksTotalBalance>(

