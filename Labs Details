 public async Task CheckRemainingDaysPerStationAsync(string jobName)
 {
     var endDate = DateTime.Now;
     var startDate = endDate.AddDays(-30);

     // 1. Load stations with tanks and last measurements
     var stationsWithTanks = await _db.Stations
         .Where(s =>
             s.DeletedAt == null &&
             s.StationType != null &&
             s.StationType.Trim().ToLower() == enStationType.Main.ToString().Trim().ToLower())
         .Select(s => new
         {
             Station = s,
             Tanks = s.Tanks
                 .Where(t => t.TankStatusId == (int)enTankStatuses.online)
                 .Select(t => new
                 {
                     Tank = t,
                     LastMeasurement = t.TankMeasurements
                         .OrderByDescending(m => m.Id)
                         .FirstOrDefault()
                 })
         })
         .ToListAsync();

     // 2. Process per station
     var stationResults = new List<StationDistributionInfo>();

     foreach (var stationEntry in stationsWithTanks)
     {
         double totalVolume = 0;
         double totalCapacity = 0;

         foreach (var tankEntry in stationEntry.Tanks)
         {
             if (tankEntry.LastMeasurement != null)
                 totalVolume += tankEntry.LastMeasurement.FuelVolume;

             totalCapacity += tankEntry.Tank.Capacity;
         }

         // Get distribution volume safely
         double totalDistributionVolume = GetStationDistributionVolumeAsync(startDate, endDate, stationEntry.Station.Guid.ToString());

         stationResults.Add(new StationDistributionInfo
         {
             City = stationEntry.Station.City.ToUpper(),
             StationGuid = stationEntry.Station.Guid.ToString(),
             TotalVolume = totalVolume,
             Capacity = totalCapacity,
             DistributionVolume = totalDistributionVolume
         });
     }

     // 3. Aggregate by city and compute final metrics
     var cityResults = stationResults
         .GroupBy(r => r.City)
         .Select(g => new CitySupplyMetrics
         {
             City = g.Key,
             CurrentVolumeLiters = g.Sum(s => s.TotalVolume),
             CapacityLiters = g.Sum(s => s.Capacity),
             TotalDistributionLast30Days = g.Sum(s => s.DistributionVolume),
             AverageDailyDistribution = g.Sum(s => s.DistributionVolume) / 30.0,
             ExpectedDaysOfSupply = (g.Sum(s => s.DistributionVolume) / 30.0) > 0
                                     ? (g.Sum(s => s.TotalVolume)) / (g.Sum(s => s.DistributionVolume) / 30.0)
                                     : 0
         })
         .OrderBy(c => c.City)
         .ToList();


     var result = cityResults
         .Select(e => new CityExpectedToProvideFuelResult
         {
             Name = e.City,
             CurrentAvailableVolume = e.CurrentVolumeLiters,
             CurrentAvailablePercentage = (e.CurrentVolumeLiters / e.CapacityLiters) * 100,
             DailyAverageConsuming = e.AverageDailyDistribution,
             AvailableDays = e.ExpectedDaysOfSupply
         })
         .ToList();


     //if (stations.Count > 0)
     //{
     //    var smsConfigs = await _configDb.JobSmsPhones
     //        .Where(e => e.JobSmsConfig.NotifyTeamJob.JobName == jobName)
     //        .Select(e => new
     //        {
     //            e.JobSmsConfig.MessageTitle,
     //            e.JobSmsConfig.MessageBody,
     //            e.Phone
     //        })
     //        .ToListAsync();

     //    try
     //    {
     //        foreach (var msg in smsConfigs)
     //            _smsService.SendSms(msg.MessageTitle, msg.Phone, msg.MessageBody);
     //    }
     //    catch (Exception ex)
     //    {
     //        var error = new HangfireJobSMSLog
     //        {
     //            JobName = jobName,
     //            AddedOn = DateTime.Now,
     //            ErrorMessage = ex.Message
     //        };

     //        await _configDb.HangfireJobSMSLogs.AddAsync(error);
     //        await _configDb.SaveChangesAsync();
     //    }

     //    var emailConfigs = await _configDb.JobEmails
     //        .Where(e => e.JobEmailConfig.NotifyTeamJob.JobName == jobName)
     //        .Select(e => new
     //        {
     //            e.JobEmailConfig.Subject,
     //            e.JobEmailConfig.Body,
     //            e.Email
     //        })
     //        .ToListAsync();

     //    try
     //    {
     //        foreach (var email in emailConfigs)
     //            await _emailService.SendEmailAsync(email.Email, email.Subject, email.Body);
     //    }
     //    catch (Exception ex)
     //    {
     //        var error = new HangfireJobEmailLog
     //        {
     //            JobName = jobName,
     //            AddedOn = DateTime.Now,
     //            ErrorMessage = ex.Message
     //        };

     //        await _configDb.HangfireJobEmailLogs.AddAsync(error);
     //        await _configDb.SaveChangesAsync();
     //    }
     //}
 }
